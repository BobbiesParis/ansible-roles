---
- name: Activate the maintenance mode
  ansible.builtin.file:
    path: "{{ odoo_nginx_document_root }}/maintenance.on"
    state: touch

- name: Stop Odoo
  block:
    - name: Stop Odoo service
      ansible.builtin.service:
        name: "{{ odoo_service }}"
        state: stopped

    - name: Wait for Odoo to stop
      ansible.builtin.wait_for:
        timeout: "{{ odoo_stop_timeout | int }}"

    - name: Check if Odoo is stopped
      ansible.builtin.command: pgrep -fc {{ odoo_bin | quote }}
      register: running_odoo_processes
      failed_when: not running_odoo_processes.stdout

    - name: Force stop Odoo
      ansible.builtin.command: pkill -f {{ odoo_bin | quote }}
      when:
        - running_odoo_processes is defined
        - ( running_odoo_processes.stdout | int ) > 0
  become: true

- name: Update source files
  ansible.builtin.include_tasks:
    file: update_sources.yml
    apply:
      tags: application

- name: Delete old lock
  ansible.builtin.file:
    path: "{{ odoo_update_lockdir }}"
    state: absent
  when: odoo_delete_old_lock

- name: Try to put a lock
  ansible.builtin.file:
    path: "{{ odoo_update_lockdir }}"
    state: directory
  register: lock_dir

- name: Update the database by the lock owner
  when: lock_dir.changed
  block:
    - name: Clone source database
      when: odoo_clone_database
      ansible.builtin.include_tasks:
        file: clone_create.yml
        apply:
          tags:
            - clone
            - application
      tags:
        - clone

    - name: Check if the database exists
      community.postgresql.postgresql_ping:
        login_host: "{{ odoo_config_db_host }}"
        port: "{{ odoo_config_db_port | int }}"
        ssl_mode: "{{ odoo_config_db_sslmode }}"
        login_user: "{{ odoo_config_db_user }}"
        login_password: "{{ odoo_config_db_password }}"
        db: "{{ odoo_config_db_name }}"
      register: database

    - name: Update database
      when:
        - database.is_available
        - odoo_update_database
      ansible.builtin.include_tasks:
        file: update_database.yml
        apply:
          tags: application

    - name: Notify Odoo restart
      when: not database.is_available or not odoo_update_database
      ansible.builtin.command: /bin/true
      notify: Restart Odoo
  always:
    - name: Delete the lock
      ansible.builtin.file:
        path: "{{ odoo_update_lockdir }}"
        state: absent

- name: Wait until the lock is deleted
  when: not lock_dir.changed
  ansible.builtin.wait_for:
    path: "{{ odoo_update_lockdir }}"
    state: absent
    delay: "{{ odoo_update_wait_delay | int }}"
    sleep: "{{ odoo_update_wait_sleep | int }}"
    timeout: "{{ odoo_update_wait_timeout | int }}"
  notify: Restart Odoo

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Deactivate the maintenance mode
  ansible.builtin.file:
    path: "{{ odoo_nginx_document_root }}/maintenance.on"
    state: absent
