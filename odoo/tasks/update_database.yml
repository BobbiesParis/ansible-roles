---

- name: Run the database update
  block:
    - name: Backup database and filestore
      include_tasks:
        file: backup_create.yml
        apply:
          tags: backup
      when: odoo_backup_database
      tags:
        - backup

    - name: Make sure the log file exists
      file:
        path: "{{ odoo_update_logfile }}"
        state: touch

    - name: Get the last line of the log file
      shell: tail -n 1 {{ odoo_update_logfile | quote }} | cut -d ' '  -f 1-2 | sed s/\\./\\\\./g
      register: start_point

    - name: Launch the database update in multi-threading mode
      command:
        argv:
          - /usr/bin/python3
          - "{{ odoo_bin }}"
          - --config={{ odoo_config_file }}
          - "{{ odoo_update_modules and '--update=%s' % odoo_update_modules or '--no-http' }}"
          - --logfile={{ odoo_update_logfile }}
          - --log-handler=:INFO
          - --log-level=info
          - --workers=0
          - --stop-after-init
        chdir: "{{ odoo_workdir }}"
      register: ret
      failed_when: ret.stderr and ret.stderr != "Running as user 'root' is a security risk."
      notify: Restart Odoo

    - name: Get update logs
      shell: cat {{ odoo_update_logfile | quote }} | grep 'Failed to initialize database\|Upgrade FAILED' | tail -n 1 | cut -d ' '  -f 1-2 | sed s/\\./\\\\./g
      register: end_point

    - name: Check if database update failed
      set_fact:
        update_failed: "{{ end_point.stdout and end_point.stdout > start_point.stdout }}"

    - name: Restore backup if update failed
      include_tasks:
        file: backup_restore.yml
        apply:
          tags: backup
      when:
        - update_failed
        - odoo_backup_database
      tags:
        - backup

    - name: Delete backup
      include_tasks:
        file: backup_remove.yml
        apply:
          tags: backup
      when: odoo_backup_database
      tags:
        - backup

    - name: Fail playbook if database update failed
      fail:
        msg: "Odoo upgrade failed"
      when: update_failed
  always:
    - name: Change the owner of Odoo log file
      file:
        path: "{{ odoo_update_logfile }}"
        owner: "{{ odoo_user }}"
        group: "{{ odoo_user }}"
        force: yes
      ignore_errors: yes
      when: odoo_update_logfile == (odoo_logrotate and odoo_logfile or odoo_config_logfile)
